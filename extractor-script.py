from urllib.request import urlopen
import re

cves = ['CVE-2014-9761', 'CVE-2015-8982', 'CVE-2015-8983', 'CVE-2016-5417', 'CVE-2016-10228', 'CVE-2015-8984', 'CVE-2016-7545', 'CVE-2016-10156', 'CVE-2015-3217', 'CVE-2017-6004', 'CVE-2017-5932', 'CVE-2016-9401', 'CVE-2016-2781', 'CVE-2015-5922', 'CVE-2017-5334', 'CVE-2017-5336', 'CVE-2017-5337', 'CVE-2017-5335', 'CVE-2016-4802', 'CVE-2016-3739', 'CVE-2016-7098', 'CVE-2017-6508', 'CVE-2016-4802', 'CVE-2016-3739', 'CVE-2016-6702', 'CVE-2016-4448', 'CVE-2016-9318', 'CVE-2015-6838', 'CVE-2015-6837', 'CVE-2014-9939', 'CVE-2017-7226', 'CVE-2017-6969', 'CVE-2017-7304', 'CVE-2017-7227', 'CVE-2017-7300', 'CVE-2017-7302', 'CVE-2017-7223', 'CVE-2017-7303', 'CVE-2017-7225', 'CVE-2017-7301', 'CVE-2017-7209', 'CVE-2017-6966', 'CVE-2017-7224', 'CVE-2017-6965', 'CVE-2017-7210', 'CVE-2017-7299', 'CVE-2016-6912', 'CVE-2016-8670', 'CVE-2016-10166', 'CVE-2016-9317', 'CVE-2016-10168', 'CVE-2016-9933', 'CVE-2016-6911', 'CVE-2016-6906', 'CVE-2016-10167', 'CVE-2014-9761', 'CVE-2015-8982', 'CVE-2015-8983', 'CVE-2016-5417', 'CVE-2016-10228', 'CVE-2015-8984', 'CVE-2014-9826', 'CVE-2014-9819', 'CVE-2014-9820', 'CVE-2014-9821', 'CVE-2014-9817', 'CVE-2014-9822', 'CVE-2014-9804', 'CVE-2016-10068', 'CVE-2014-9805', 'CVE-2014-9810', 'CVE-2014-9815', 'CVE-2014-9816', 'CVE-2014-9806', 'CVE-2014-9808', 'CVE-2014-9812', 'CVE-2014-9807', 'CVE-2014-9809', 'CVE-2014-9813', 'CVE-2014-9814', 'CVE-2017-7275', 'CVE-2014-9811', 'CVE-2014-9818', 'CVE-2016-9085', 'CVE-2016-7942', 'CVE-2016-7943', 'CVE-2014-9769', 'CVE-2016-3191', 'CVE-2015-3210', 'CVE-2017-7245', 'CVE-2017-7246', 'CVE-2015-5073', 'CVE-2015-3217', 'CVE-2017-7186', 'CVE-2017-6004', 'CVE-2017-7244', 'CVE-2016-4802', 'CVE-2016-3739', 'CVE-2016-6702', 'CVE-2016-10244', 'CVE-2015-8875', 'CVE-2016-6352', 'CVE-2017-6311', 'CVE-2017-6312', 'CVE-2017-6313', 'CVE-2017-6314', 'CVE-2016-9387', 'CVE-2016-8886', 'CVE-2017-6852', 'CVE-2016-10251', 'CVE-2016-10249', 'CVE-2016-9397', 'CVE-2016-9398', 'CVE-2016-9396', 'CVE-2016-10248', 'CVE-2016-9389', 'CVE-2016-9391', 'CVE-2016-9399', 'CVE-2016-10250', 'CVE-2016-9262', 'CVE-2017-6851', 'CVE-2016-9392', 'CVE-2016-8690', 'CVE-2016-9390', 'CVE-2016-8885', 'CVE-2017-6850', 'CVE-2016-9395', 'CVE-2016-8887', 'CVE-2016-9388', 'CVE-2016-9394', 'CVE-2017-5499', 'CVE-2017-5500', 'CVE-2017-5501', 'CVE-2017-5504', 'CVE-2017-5505', 'CVE-2016-9393', 'CVE-2016-9557', 'CVE-2016-8883', 'CVE-2017-5498', 'CVE-2017-5503', 'CVE-2016-8884', 'CVE-2017-5502', 'CVE-2017-6311', 'CVE-2017-6312', 'CVE-2017-6313', 'CVE-2017-6314', 'CVE-2016-3658', 'CVE-2016-3625', 'CVE-2016-5318', 'CVE-2015-3217', 'CVE-2017-6004', 'CVE-2016-6163', 'CVE-2016-5300', 'CVE-2016-0718', 'CVE-2016-4472', 'CVE-2016-6702', 'CVE-2012-6702']
upgradable_packages = []
unfixed_packages = []
version = 'jessie'
print_description = True

print("Full list of CVEs:")
for cve in cves:
    url = 'https://security-tracker.debian.org/tracker/'
    response = urlopen(url + cve)
    html = response.read().decode('UTF-8')

    # get package name
    package_name_start = 'Status'
    begin = str.find(html, package_name_start) + len(package_name_start)
    package_name = html[begin:begin + 100]
    begin = str.find(package_name, '">') + 2
    end = str.find(package_name, '</a>')
    package_name = package_name[begin:end]

    description = ""
    if print_description:
        # get description
        description_tag = 'Description'
        begin = str.find(html, description_tag) + len(description_tag)
        description_html = html[begin:begin + 500]
        description_html = description_html[13:]
        end = str.find(description_html, '</td>')
        description = description_html[:end]

    # remove span tags
    html = re.sub('(<span class=".*?">)', '', html)
    html = str.replace(html, '</span>', '')

    # extract status
    version_begin = str.find(html, version) + len(version)
    html_after_version = html[version_begin:version_begin + 100]
    closing_tag_after_version = str.find(html_after_version, '</td>')
    status = str.replace(html_after_version[closing_tag_after_version +
                                            len('</td>'):closing_tag_after_version + 80], '<td>', '')
    status = str.split(status, '</td>')

    try:
        print(package_name + '\t' + cve + '\t' + status[1] + '\t' + description)
        # add packages of fixed CVEs to the list of upgradable packages
        if status[1] == 'fixed':
            if package_name not in upgradable_packages:
                upgradable_packages.append(package_name)
        else:
            if package_name not in unfixed_packages:
                unfixed_packages.append(package_name)
    except IndexError:
        print('could not find version of https://security-tracker.debian.org/tracker/' + cve)

print("\nUpgradeable packages:")
for package in upgradable_packages:
    # mark not completely upgradeable packages and remove them from the unfixed
    if package in unfixed_packages:
        print(package + ' (will still have vulnerabilities after upgrade)')
        unfixed_packages.remove(package)
    else:
        print(package)

print("\nUnfixed packages")
for package in unfixed_packages:
    print(package)
